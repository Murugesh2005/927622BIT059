{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Documents\\\\Solution\\\\src\\\\components\\\\StockChart.tsx\",\n  _s = $RefreshSig$();\nimport React, { useMemo } from 'react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, ReferenceLine } from 'recharts';\nimport { Paper, Typography, Box, useTheme, useMediaQuery } from '@mui/material';\n\n// Define types locally if they don't exist\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Define utility functions locally if they don't exist\nconst calculateAverage = numbers => {\n  if (numbers.length === 0) return 0;\n  const sum = numbers.reduce((acc, num) => acc + num, 0);\n  return sum / numbers.length;\n};\nconst formatCurrency = value => {\n  return new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2\n  }).format(value);\n};\nconst CHART_COLORS = ['#8884d8', '#82ca9d', '#ffc658', '#ff7300', '#00ff00', '#ff00ff', '#00ffff', '#ff8042', '#0088fe', '#00c49f'];\nexport const StockChart = ({\n  data,\n  selectedStocks,\n  showAverage = false\n}) => {\n  _s();\n  const theme = useTheme();\n  const isMobile = useMediaQuery(theme.breakpoints.down('sm'));\n  const isTablet = useMediaQuery(theme.breakpoints.down('md'));\n\n  // Prepare chart data\n  const chartData = useMemo(() => {\n    if (!selectedStocks.length || !Object.keys(data).length) return [];\n\n    // Get all unique timestamps\n    const allTimestamps = new Set();\n    selectedStocks.forEach(ticker => {\n      if (data[ticker]) {\n        data[ticker].forEach(point => allTimestamps.add(point.timestamp));\n      }\n    });\n    const sortedTimestamps = Array.from(allTimestamps).sort();\n\n    // Limit data points for performance on mobile\n    const maxDataPoints = isMobile ? 30 : isTablet ? 60 : 100;\n    const step = Math.max(1, Math.floor(sortedTimestamps.length / maxDataPoints));\n    const filteredTimestamps = sortedTimestamps.filter((_, index) => index % step === 0);\n    return filteredTimestamps.map(timestamp => {\n      const point = {\n        timestamp: new Date(timestamp).toLocaleTimeString([], {\n          hour: '2-digit',\n          minute: '2-digit',\n          ...(isMobile ? {} : {\n            second: '2-digit'\n          })\n        }),\n        fullTimestamp: timestamp\n      };\n      selectedStocks.forEach(ticker => {\n        if (data[ticker]) {\n          const stockPoint = data[ticker].find(p => p.timestamp === timestamp);\n          point[ticker] = stockPoint ? Number(stockPoint.price.toFixed(2)) : null;\n        }\n      });\n      return point;\n    }).filter(point => selectedStocks.some(ticker => point[ticker] !== null));\n  }, [data, selectedStocks, isMobile, isTablet]);\n\n  // Calculate averages for reference lines\n  const averages = useMemo(() => {\n    const avgs = {};\n    selectedStocks.forEach(ticker => {\n      if (data[ticker] && data[ticker].length > 0) {\n        const prices = data[ticker].map(p => p.price);\n        avgs[ticker] = calculateAverage(prices);\n      }\n    });\n    return avgs;\n  }, [data, selectedStocks]);\n\n  // Custom tooltip\n  const CustomTooltip = ({\n    active,\n    payload,\n    label\n  }) => {\n    if (active && payload && payload.length) {\n      return /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          backgroundColor: 'background.paper',\n          border: 1,\n          borderColor: 'divider',\n          borderRadius: 1,\n          p: 1.5,\n          boxShadow: 2,\n          fontSize: isMobile ? '0.75rem' : '0.875rem'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"caption\",\n          sx: {\n            fontWeight: 'bold'\n          },\n          children: [\"Time: \", label]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }, this), payload.map((entry, index) => /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"caption\",\n          sx: {\n            color: entry.color,\n            display: 'block',\n            fontWeight: 'medium'\n          },\n          children: [entry.dataKey, \": \", formatCurrency(entry.value)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this);\n    }\n    return null;\n  };\n  if (chartData.length === 0) {\n    return /*#__PURE__*/_jsxDEV(Paper, {\n      sx: {\n        p: 3,\n        textAlign: 'center'\n      },\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        color: \"textSecondary\",\n        children: selectedStocks.length === 0 ? 'Please select stocks to view chart' : 'No data available for selected stocks'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this);\n  }\n  const chartHeight = isMobile ? 300 : isTablet ? 400 : 500;\n\n  // Prepare reference lines outside JSX\n  const referenceLines = React.useMemo(() => {\n    if (!showAverage || isMobile) return [];\n    return selectedStocks.slice(0, 5).filter(ticker => averages[ticker]).map((ticker, index) => /*#__PURE__*/_jsxDEV(ReferenceLine, {\n      y: averages[ticker],\n      stroke: CHART_COLORS[index % CHART_COLORS.length],\n      strokeDasharray: \"8 8\",\n      strokeWidth: 1.5,\n      label: /*#__PURE__*/_jsxDEV(\"text\", {\n        x: 0,\n        y: 0,\n        fontSize: 11,\n        textAnchor: \"end\",\n        fill: CHART_COLORS[index % CHART_COLORS.length],\n        children: `${ticker} Avg: ${formatCurrency(averages[ticker])}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 13\n      }, this)\n    }, `avg-${ticker}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 9\n    }, this));\n  }, [showAverage, isMobile, selectedStocks, averages]);\n\n  // Prepare mobile averages\n  const mobileAverages = React.useMemo(() => {\n    if (!showAverage || !isMobile) return [];\n    return selectedStocks.slice(0, 3).filter(ticker => averages[ticker]).map(ticker => /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"caption\",\n      sx: {\n        display: 'block'\n      },\n      children: [ticker, \": \", formatCurrency(averages[ticker])]\n    }, ticker, true, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 9\n    }, this));\n  }, [showAverage, isMobile, selectedStocks, averages]);\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    sx: {\n      p: isMobile ? 2 : 3\n    },\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: isMobile ? \"subtitle1\" : \"h6\",\n      gutterBottom: true,\n      children: \"Stock Price History\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        width: '100%',\n        height: chartHeight\n      },\n      children: /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n        children: /*#__PURE__*/_jsxDEV(LineChart, {\n          data: chartData,\n          margin: {\n            top: 20,\n            right: isMobile ? 10 : 30,\n            left: isMobile ? 10 : 20,\n            bottom: isMobile ? 60 : 20\n          },\n          children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n            strokeDasharray: \"3 3\",\n            opacity: 0.3\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n            dataKey: \"timestamp\",\n            tick: {\n              fontSize: isMobile ? 10 : 12\n            },\n            interval: isMobile ? \"preserveStartEnd\" : \"preserveStart\",\n            angle: isMobile ? -45 : 0,\n            textAnchor: isMobile ? \"end\" : \"middle\",\n            height: isMobile ? 60 : 30\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n            tick: {\n              fontSize: isMobile ? 10 : 12\n            },\n            width: isMobile ? 60 : 80,\n            tickFormatter: value => `${value}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n            content: /*#__PURE__*/_jsxDEV(CustomTooltip, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 230,\n              columnNumber: 31\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 13\n          }, this), !isMobile && /*#__PURE__*/_jsxDEV(Legend, {\n            wrapperStyle: {\n              fontSize: '14px'\n            },\n            iconType: \"line\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 232,\n            columnNumber: 15\n          }, this), selectedStocks.slice(0, isMobile ? 3 : 10).map((ticker, index) => /*#__PURE__*/_jsxDEV(Line, {\n            type: \"monotone\",\n            dataKey: ticker,\n            stroke: CHART_COLORS[index % CHART_COLORS.length],\n            strokeWidth: isMobile ? 2 : 2.5,\n            dot: {\n              r: isMobile ? 0 : 3,\n              strokeWidth: 2\n            },\n            activeDot: {\n              r: isMobile ? 4 : 6,\n              strokeWidth: 0\n            },\n            connectNulls: false,\n            name: ticker\n          }, ticker, false, {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 15\n          }, this)), referenceLines]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 7\n    }, this), isMobile && selectedStocks.length > 3 && /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"caption\",\n      color: \"textSecondary\",\n      sx: {\n        mt: 1,\n        display: 'block'\n      },\n      children: \"Showing first 3 stocks. Switch to desktop view for more stocks.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 9\n    }, this), showAverage && isMobile && mobileAverages.length > 0 && /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        mt: 2\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"caption\",\n        fontWeight: \"bold\",\n        children: \"Averages:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 11\n      }, this), mobileAverages]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 200,\n    columnNumber: 5\n  }, this);\n};\n_s(StockChart, \"Rw3i4PWqJ/IwLZN0JIePcAQ17pM=\", false, function () {\n  return [useTheme, useMediaQuery, useMediaQuery];\n});\n_c = StockChart;\nvar _c;\n$RefreshReg$(_c, \"StockChart\");","map":{"version":3,"names":["React","useMemo","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","ReferenceLine","Paper","Typography","Box","useTheme","useMediaQuery","jsxDEV","_jsxDEV","calculateAverage","numbers","length","sum","reduce","acc","num","formatCurrency","value","Intl","NumberFormat","style","currency","minimumFractionDigits","maximumFractionDigits","format","CHART_COLORS","StockChart","data","selectedStocks","showAverage","_s","theme","isMobile","breakpoints","down","isTablet","chartData","Object","keys","allTimestamps","Set","forEach","ticker","point","add","timestamp","sortedTimestamps","Array","from","sort","maxDataPoints","step","Math","max","floor","filteredTimestamps","filter","_","index","map","Date","toLocaleTimeString","hour","minute","second","fullTimestamp","stockPoint","find","p","Number","price","toFixed","some","averages","avgs","prices","CustomTooltip","active","payload","label","sx","backgroundColor","border","borderColor","borderRadius","boxShadow","fontSize","children","variant","fontWeight","fileName","_jsxFileName","lineNumber","columnNumber","entry","color","display","dataKey","textAlign","chartHeight","referenceLines","slice","y","stroke","strokeDasharray","strokeWidth","x","textAnchor","fill","mobileAverages","gutterBottom","width","height","margin","top","right","left","bottom","opacity","tick","interval","angle","tickFormatter","content","wrapperStyle","iconType","type","dot","r","activeDot","connectNulls","name","mt","_c","$RefreshReg$"],"sources":["C:/Users/DELL/Documents/Solution/src/components/StockChart.tsx"],"sourcesContent":["import React, { useMemo } from 'react';\r\nimport {\r\n  LineChart,\r\n  Line,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  Legend,\r\n  ResponsiveContainer,\r\n  ReferenceLine,\r\n} from 'recharts';\r\nimport { Paper, Typography, Box, useTheme, useMediaQuery } from '@mui/material';\r\n\r\n// Define types locally if they don't exist\r\ninterface StockPrice {\r\n  timestamp: string;\r\n  price: number;\r\n}\r\n\r\n// Define utility functions locally if they don't exist\r\nconst calculateAverage = (numbers: number[]): number => {\r\n  if (numbers.length === 0) return 0;\r\n  const sum = numbers.reduce((acc, num) => acc + num, 0);\r\n  return sum / numbers.length;\r\n};\r\n\r\nconst formatCurrency = (value: number): string => {\r\n  return new Intl.NumberFormat('en-US', {\r\n    style: 'currency',\r\n    currency: 'USD',\r\n    minimumFractionDigits: 2,\r\n    maximumFractionDigits: 2,\r\n  }).format(value);\r\n};\r\n\r\ninterface StockChartProps {\r\n  data: Record<string, StockPrice[]>;\r\n  selectedStocks: string[];\r\n  showAverage?: boolean;\r\n}\r\n\r\nconst CHART_COLORS = [\r\n  '#8884d8', '#82ca9d', '#ffc658', '#ff7300', '#00ff00', \r\n  '#ff00ff', '#00ffff', '#ff8042', '#0088fe', '#00c49f'\r\n];\r\n\r\nexport const StockChart: React.FC<StockChartProps> = ({ \r\n  data, \r\n  selectedStocks, \r\n  showAverage = false \r\n}) => {\r\n  const theme = useTheme();\r\n  const isMobile = useMediaQuery(theme.breakpoints.down('sm'));\r\n  const isTablet = useMediaQuery(theme.breakpoints.down('md'));\r\n\r\n  // Prepare chart data\r\n  const chartData = useMemo(() => {\r\n    if (!selectedStocks.length || !Object.keys(data).length) return [];\r\n\r\n    // Get all unique timestamps\r\n    const allTimestamps = new Set<string>();\r\n    selectedStocks.forEach(ticker => {\r\n      if (data[ticker]) {\r\n        data[ticker].forEach(point => allTimestamps.add(point.timestamp));\r\n      }\r\n    });\r\n\r\n    const sortedTimestamps = Array.from(allTimestamps).sort();\r\n    \r\n    // Limit data points for performance on mobile\r\n    const maxDataPoints = isMobile ? 30 : isTablet ? 60 : 100;\r\n    const step = Math.max(1, Math.floor(sortedTimestamps.length / maxDataPoints));\r\n    const filteredTimestamps = sortedTimestamps.filter((_, index) => index % step === 0);\r\n    \r\n    return filteredTimestamps.map(timestamp => {\r\n      const point: Record<string, string | number | null> = { \r\n        timestamp: new Date(timestamp).toLocaleTimeString([], { \r\n          hour: '2-digit', \r\n          minute: '2-digit',\r\n          ...(isMobile ? {} : { second: '2-digit' })\r\n        }),\r\n        fullTimestamp: timestamp\r\n      };\r\n      \r\n      selectedStocks.forEach(ticker => {\r\n        if (data[ticker]) {\r\n          const stockPoint = data[ticker].find(p => p.timestamp === timestamp);\r\n          point[ticker] = stockPoint ? Number(stockPoint.price.toFixed(2)) : null;\r\n        }\r\n      });\r\n      \r\n      return point;\r\n    }).filter(point => \r\n      selectedStocks.some(ticker => point[ticker] !== null)\r\n    );\r\n  }, [data, selectedStocks, isMobile, isTablet]);\r\n\r\n  // Calculate averages for reference lines\r\n  const averages = useMemo(() => {\r\n    const avgs: Record<string, number> = {};\r\n    selectedStocks.forEach(ticker => {\r\n      if (data[ticker] && data[ticker].length > 0) {\r\n        const prices = data[ticker].map(p => p.price);\r\n        avgs[ticker] = calculateAverage(prices);\r\n      }\r\n    });\r\n    return avgs;\r\n  }, [data, selectedStocks]);\r\n\r\n  // Custom tooltip\r\n  const CustomTooltip = ({ active, payload, label }: any) => {\r\n    if (active && payload && payload.length) {\r\n      return (\r\n        <Box\r\n          sx={{\r\n            backgroundColor: 'background.paper',\r\n            border: 1,\r\n            borderColor: 'divider',\r\n            borderRadius: 1,\r\n            p: 1.5,\r\n            boxShadow: 2,\r\n            fontSize: isMobile ? '0.75rem' : '0.875rem'\r\n          }}\r\n        >\r\n          <Typography variant=\"caption\" sx={{ fontWeight: 'bold' }}>\r\n            Time: {label}\r\n          </Typography>\r\n          {payload.map((entry: any, index: number) => (\r\n            <Typography\r\n              key={index}\r\n              variant=\"caption\"\r\n              sx={{ \r\n                color: entry.color,\r\n                display: 'block',\r\n                fontWeight: 'medium'\r\n              }}\r\n            >\r\n              {entry.dataKey}: {formatCurrency(entry.value)}\r\n            </Typography>\r\n          ))}\r\n        </Box>\r\n      );\r\n    }\r\n    return null;\r\n  };\r\n\r\n  if (chartData.length === 0) {\r\n    return (\r\n      <Paper sx={{ p: 3, textAlign: 'center' }}>\r\n        <Typography variant=\"h6\" color=\"textSecondary\">\r\n          {selectedStocks.length === 0 \r\n            ? 'Please select stocks to view chart' \r\n            : 'No data available for selected stocks'\r\n          }\r\n        </Typography>\r\n      </Paper>\r\n    );\r\n  }\r\n\r\n  const chartHeight = isMobile ? 300 : isTablet ? 400 : 500;\r\n\r\n  // Prepare reference lines outside JSX\r\n  const referenceLines = React.useMemo(() => {\r\n    if (!showAverage || isMobile) return [];\r\n    \r\n    return selectedStocks\r\n      .slice(0, 5)\r\n      .filter(ticker => averages[ticker])\r\n      .map((ticker, index) => (\r\n        <ReferenceLine\r\n          key={`avg-${ticker}`}\r\n          y={averages[ticker]}\r\n          stroke={CHART_COLORS[index % CHART_COLORS.length]}\r\n          strokeDasharray=\"8 8\"\r\n          strokeWidth={1.5}\r\n          label={\r\n            <text x={0} y={0} fontSize={11} textAnchor=\"end\" fill={CHART_COLORS[index % CHART_COLORS.length]}>\r\n              {`${ticker} Avg: ${formatCurrency(averages[ticker])}`}\r\n            </text>\r\n          }\r\n        />\r\n      ));  }, [showAverage, isMobile, selectedStocks, averages]);\r\n\r\n  // Prepare mobile averages\r\n  const mobileAverages = React.useMemo(() => {\r\n    if (!showAverage || !isMobile) return [];\r\n    \r\n    return selectedStocks\r\n      .slice(0, 3)\r\n      .filter(ticker => averages[ticker])\r\n      .map(ticker => (\r\n        <Typography key={ticker} variant=\"caption\" sx={{ display: 'block' }}>\r\n          {ticker}: {formatCurrency(averages[ticker])}\r\n        </Typography>\r\n      ));\r\n  }, [showAverage, isMobile, selectedStocks, averages]);\r\n\r\n  return (\r\n    <Paper sx={{ p: isMobile ? 2 : 3 }}>\r\n      <Typography variant={isMobile ? \"subtitle1\" : \"h6\"} gutterBottom>\r\n        Stock Price History\r\n      </Typography>\r\n      \r\n      <Box sx={{ width: '100%', height: chartHeight }}>\r\n        <ResponsiveContainer>\r\n          <LineChart \r\n            data={chartData} \r\n            margin={{ \r\n              top: 20, \r\n              right: isMobile ? 10 : 30, \r\n              left: isMobile ? 10 : 20, \r\n              bottom: isMobile ? 60 : 20 \r\n            }}\r\n          >\r\n            <CartesianGrid strokeDasharray=\"3 3\" opacity={0.3} />\r\n            <XAxis \r\n              dataKey=\"timestamp\" \r\n              tick={{ fontSize: isMobile ? 10 : 12 }}\r\n              interval={isMobile ? \"preserveStartEnd\" : \"preserveStart\"}\r\n              angle={isMobile ? -45 : 0}\r\n              textAnchor={isMobile ? \"end\" : \"middle\"}\r\n              height={isMobile ? 60 : 30}\r\n            />\r\n            <YAxis \r\n              tick={{ fontSize: isMobile ? 10 : 12 }}\r\n              width={isMobile ? 60 : 80}\r\n              tickFormatter={(value) => `${value}`}\r\n            />\r\n            <Tooltip content={<CustomTooltip />} />\r\n            {!isMobile && (\r\n              <Legend \r\n                wrapperStyle={{ fontSize: '14px' }}\r\n                iconType=\"line\"\r\n              />\r\n            )}\r\n            \r\n            {selectedStocks.slice(0, isMobile ? 3 : 10).map((ticker, index) => (\r\n              <Line\r\n                key={ticker}\r\n                type=\"monotone\"\r\n                dataKey={ticker}\r\n                stroke={CHART_COLORS[index % CHART_COLORS.length]}\r\n                strokeWidth={isMobile ? 2 : 2.5}\r\n                dot={{ r: isMobile ? 0 : 3, strokeWidth: 2 }}\r\n                activeDot={{ r: isMobile ? 4 : 6, strokeWidth: 0 }}\r\n                connectNulls={false}\r\n                name={ticker}\r\n              />\r\n            ))}\r\n            \r\n            {referenceLines}\r\n          </LineChart>\r\n        </ResponsiveContainer>\r\n      </Box>\r\n      \r\n      {isMobile && selectedStocks.length > 3 && (\r\n        <Typography variant=\"caption\" color=\"textSecondary\" sx={{ mt: 1, display: 'block' }}>\r\n          Showing first 3 stocks. Switch to desktop view for more stocks.\r\n        </Typography>\r\n      )}\r\n\r\n      {showAverage && isMobile && mobileAverages.length > 0 && (\r\n        <Box sx={{ mt: 2 }}>\r\n          <Typography variant=\"caption\" fontWeight=\"bold\">Averages:</Typography>\r\n          {mobileAverages}\r\n        </Box>\r\n      )}\r\n    </Paper>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}